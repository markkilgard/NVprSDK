<?xml version='1.0' encoding='UTF-8'?> 
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="cairo-png-functions">
<refmeta>
<refentrytitle role="top_of_page" id="cairo-png-functions.top_of_page">PNG Support</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CAIRO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>PNG Support</refname>
<refpurpose>Reading and writing PNG images</refpurpose>
</refnamediv>

<refsynopsisdiv id="cairo-png-functions.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="CAIRO-HAS-PNG-FUNCTIONS--CAPS">CAIRO_HAS_PNG_FUNCTIONS</link>
<link linkend="cairo-surface-t">cairo_surface_t</link> *   <link linkend="cairo-image-surface-create-from-png">cairo_image_surface_create_from_png</link> (const <link linkend="char">char</link> *filename);
<link linkend="cairo-status-t">cairo_status_t</link>      (<link linkend="cairo-read-func-t">*cairo_read_func_t</link>)                (<link linkend="void">void</link> *closure,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         unsigned <link linkend="int">int</link> length);
<link linkend="cairo-surface-t">cairo_surface_t</link> *   <link linkend="cairo-image-surface-create-from-png-stream">cairo_image_surface_create_from_png_stream</link>
                                                        (<link linkend="cairo-read-func-t">cairo_read_func_t</link> read_func,
                                                         <link linkend="void">void</link> *closure);
<link linkend="cairo-status-t">cairo_status_t</link>      <link linkend="cairo-surface-write-to-png">cairo_surface_write_to_png</link>          (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                                         const <link linkend="char">char</link> *filename);
<link linkend="cairo-status-t">cairo_status_t</link>      (<link linkend="cairo-write-func-t">*cairo_write_func_t</link>)               (<link linkend="void">void</link> *closure,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         unsigned <link linkend="int">int</link> length);
<link linkend="cairo-status-t">cairo_status_t</link>      <link linkend="cairo-surface-write-to-png-stream">cairo_surface_write_to_png_stream</link>   (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                                         <link linkend="cairo-write-func-t">cairo_write_func_t</link> write_func,
                                                         <link linkend="void">void</link> *closure);
</synopsis>
</refsynopsisdiv>









<refsect1 id="cairo-png-functions.description" role="desc">
<title role="desc.title">Description</title>
<para>
The PNG functions allow reading PNG images into image surfaces, and writing
any surface to a PNG file.
</para>
</refsect1>

<refsect1 id="cairo-png-functions.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CAIRO-HAS-PNG-FUNCTIONS--CAPS" role="macro">
<title>CAIRO_HAS_PNG_FUNCTIONS</title>
<indexterm zone="CAIRO-HAS-PNG-FUNCTIONS--CAPS"><primary sortas="CAIRO_HAS_PNG_FUNCTIONS">CAIRO_HAS_PNG_FUNCTIONS</primary></indexterm><programlisting>#define             CAIRO_HAS_PNG_FUNCTIONS</programlisting>
<para>
Defined if the PNG functions are available.
This macro can be used to conditionally compile code using the cairo
PNG functions.
</para></refsect2>
<refsect2 id="cairo-image-surface-create-from-png" role="function">
<title>cairo_image_surface_create_from_png ()</title>
<indexterm zone="cairo-image-surface-create-from-png"><primary sortas="cairo_image_surface_create_from_png">cairo_image_surface_create_from_png</primary></indexterm><programlisting><link linkend="cairo-surface-t">cairo_surface_t</link> *   cairo_image_surface_create_from_png (const <link linkend="char">char</link> *filename);</programlisting>
<para>
Creates a new image surface and initializes the contents to the
given PNG file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara> name of PNG file to load
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> initialized with the contents
of the PNG file, or a "nil" surface if any error occurred. A nil
surface can be checked for with cairo_surface_status(surface) which
may return one of the following values:

<link linkend="CAIRO-STATUS-NO-MEMORY--CAPS"><literal>CAIRO_STATUS_NO_MEMORY</literal></link>
<link linkend="CAIRO-STATUS-FILE-NOT-FOUND--CAPS"><literal>CAIRO_STATUS_FILE_NOT_FOUND</literal></link>
<link linkend="CAIRO-STATUS-READ-ERROR--CAPS"><literal>CAIRO_STATUS_READ_ERROR</literal></link>

Alternatively, you can allow errors to propagate through the drawing
operations and check the status on the context upon completion
using <link linkend="cairo-status"><function>cairo_status()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cairo-read-func-t" role="function">
<title>cairo_read_func_t ()</title>
<indexterm zone="cairo-read-func-t"><primary sortas="cairo_read_func_t">cairo_read_func_t</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link>      (*cairo_read_func_t)                (<link linkend="void">void</link> *closure,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         unsigned <link linkend="int">int</link> length);</programlisting>
<para>
<link linkend="cairo-read-func-t"><type>cairo_read_func_t</type></link> is the type of function which is called when a
backend needs to read data from an input stream.  It is passed the
closure which was specified by the user at the time the read
function was registered, the buffer to read the data into and the
length of the data in bytes.  The read function should return
<link linkend="CAIRO-STATUS-SUCCESS--CAPS"><literal>CAIRO_STATUS_SUCCESS</literal></link> if all the data was successfully read,
<link linkend="CAIRO-STATUS-READ-ERROR--CAPS"><literal>CAIRO_STATUS_READ_ERROR</literal></link> otherwise.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> the input closure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the buffer into which to read the data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the amount of data to read
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the status code of the read operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cairo-image-surface-create-from-png-stream" role="function">
<title>cairo_image_surface_create_from_png_stream ()</title>
<indexterm zone="cairo-image-surface-create-from-png-stream"><primary sortas="cairo_image_surface_create_from_png_stream">cairo_image_surface_create_from_png_stream</primary></indexterm><programlisting><link linkend="cairo-surface-t">cairo_surface_t</link> *   cairo_image_surface_create_from_png_stream
                                                        (<link linkend="cairo-read-func-t">cairo_read_func_t</link> read_func,
                                                         <link linkend="void">void</link> *closure);</programlisting>
<para>
Creates a new image surface from PNG data read incrementally
via the <parameter>read_func</parameter> function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>read_func</parameter>&#160;:</term>
<listitem><simpara> function called to read the data of the file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>read_func</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> initialized with the contents
of the PNG file or a "nil" surface if the data read is not a valid PNG image
or memory could not be allocated for the operation.  A nil
surface can be checked for with cairo_surface_status(surface) which
may return one of the following values:

<link linkend="CAIRO-STATUS-NO-MEMORY--CAPS"><literal>CAIRO_STATUS_NO_MEMORY</literal></link>
<link linkend="CAIRO-STATUS-READ-ERROR--CAPS"><literal>CAIRO_STATUS_READ_ERROR</literal></link>

Alternatively, you can allow errors to propagate through the drawing
operations and check the status on the context upon completion
using <link linkend="cairo-status"><function>cairo_status()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cairo-surface-write-to-png" role="function">
<title>cairo_surface_write_to_png ()</title>
<indexterm zone="cairo-surface-write-to-png"><primary sortas="cairo_surface_write_to_png">cairo_surface_write_to_png</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link>      cairo_surface_write_to_png          (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                                         const <link linkend="char">char</link> *filename);</programlisting>
<para>
Writes the contents of <parameter>surface</parameter> to a new file <parameter>filename</parameter> as a PNG
image.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>surface</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> with pixel contents
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara> the name of a file to write to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="CAIRO-STATUS-SUCCESS--CAPS"><literal>CAIRO_STATUS_SUCCESS</literal></link> if the PNG file was written
successfully. Otherwise, <link linkend="CAIRO-STATUS-NO-MEMORY--CAPS"><literal>CAIRO_STATUS_NO_MEMORY</literal></link> if memory could not
be allocated for the operation or
<link linkend="CAIRO-STATUS-SURFACE-TYPE-MISMATCH--CAPS"><literal>CAIRO_STATUS_SURFACE_TYPE_MISMATCH</literal></link> if the surface does not have
pixel contents, or <link linkend="CAIRO-STATUS-WRITE-ERROR--CAPS"><literal>CAIRO_STATUS_WRITE_ERROR</literal></link> if an I/O error occurs
while attempting to write the file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cairo-write-func-t" role="function">
<title>cairo_write_func_t ()</title>
<indexterm zone="cairo-write-func-t"><primary sortas="cairo_write_func_t">cairo_write_func_t</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link>      (*cairo_write_func_t)               (<link linkend="void">void</link> *closure,
                                                         unsigned <link linkend="char">char</link> *data,
                                                         unsigned <link linkend="int">int</link> length);</programlisting>
<para>
<link linkend="cairo-write-func-t"><type>cairo_write_func_t</type></link> is the type of function which is called when a
backend needs to write data to an output stream.  It is passed the
closure which was specified by the user at the time the write
function was registered, the data to write and the length of the
data in bytes.  The write function should return
<link linkend="CAIRO-STATUS-SUCCESS--CAPS"><literal>CAIRO_STATUS_SUCCESS</literal></link> if all the data was successfully written,
<link linkend="CAIRO-STATUS-WRITE-ERROR--CAPS"><literal>CAIRO_STATUS_WRITE_ERROR</literal></link> otherwise.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> the output closure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the buffer containing the data to write
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length</parameter>&#160;:</term>
<listitem><simpara> the amount of data to write
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the status code of the write operation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cairo-surface-write-to-png-stream" role="function">
<title>cairo_surface_write_to_png_stream ()</title>
<indexterm zone="cairo-surface-write-to-png-stream"><primary sortas="cairo_surface_write_to_png_stream">cairo_surface_write_to_png_stream</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link>      cairo_surface_write_to_png_stream   (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                                         <link linkend="cairo-write-func-t">cairo_write_func_t</link> write_func,
                                                         <link linkend="void">void</link> *closure);</programlisting>
<para>
Writes the image surface to the write function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>surface</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> with pixel contents
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>write_func</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="cairo-write-func-t"><type>cairo_write_func_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> closure data for the write function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="CAIRO-STATUS-SUCCESS--CAPS"><literal>CAIRO_STATUS_SUCCESS</literal></link> if the PNG file was written
successfully.  Otherwise, <link linkend="CAIRO-STATUS-NO-MEMORY--CAPS"><literal>CAIRO_STATUS_NO_MEMORY</literal></link> is returned if
memory could not be allocated for the operation,
<link linkend="CAIRO-STATUS-SURFACE-TYPE-MISMATCH--CAPS"><literal>CAIRO_STATUS_SURFACE_TYPE_MISMATCH</literal></link> if the surface does not have
pixel contents.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="cairo-png-functions.see-also">
<title>See Also</title>
<para>
<itemizedlist>
<listitem><link linkend="cairo-surface-t"><type>cairo_surface_t</type></link></listitem>
</itemizedlist>
</para>
</refsect1>

</refentry>
