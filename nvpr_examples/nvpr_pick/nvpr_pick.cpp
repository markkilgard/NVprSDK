
/* nv_pick.c - picking points inside paths with NV_path_rendering */

// Copyright (c) NVIDIA Corporation. All rights reserved.

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <GL/glew.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <vector>

#include <Cg/double.hpp>
#include <Cg/vector/xyzw.hpp>
#include <Cg/vector/rgba.hpp>
#include <Cg/matrix/1based.hpp>
#include <Cg/matrix/rows.hpp>
#include <Cg/vector.hpp>
#include <Cg/matrix.hpp>
#include <Cg/distance.hpp>
#include <Cg/max.hpp>
#include <Cg/mul.hpp>
#include <Cg/stdlib.hpp>
#include <Cg/iostream.hpp>

using namespace Cg;
using std::cout;
using std::endl;
using std::vector;

#include "nvpr_glew_init.h"
#include "request_vsync.h"
#include "showfps.h"
#include "cg4cpp_xform.hpp"

const char *program_name = "nv_pick";
int stroking = 1,
    filling = 1;

/* Scaling and rotation state. */
float2 anchor;  /* Anchor for rotation and scaling. */
int scale_y = 0, 
    rotate_x = 0;  /* Prior (x,y) location for scaling (vertical) or rotation (horizontal)? */
int zooming = 0;  /* Are we zooming currently? */
int scaling = 0;  /* Are we scaling (zooming) currently? */

/* Sliding (translation) state. */
float slide_x = 0,
      slide_y = 0;  /* Prior (x,y) location for sliding. */
int sliding = 0;  /* Are we sliding currently? */
unsigned int path_count;
int canvas_width = 640, canvas_height = 480;
float4 box;
bool show_bounding_box = true;
bool verbose = false;
bool animating = false;
bool enable_vsync = true;
bool show_fps = false;

float2 corners[4];
float2 moved_corners[4];
float3x3 model, view, inverse_view;

FPScontext gl_fps_context;

struct Result {
    bool in_fill;
    bool in_stroke;
    float2 p;

    Result(bool f, bool s, float2 xy)
        : in_fill(f)
        , in_stroke(s)
        , p(xy)
    {}

    Result &operator = (const Result &src) {
        if (this != &src) {
            in_fill = src.in_fill;
            in_stroke = src.in_stroke;
            p = src.p;
        }
        return *this;
    }
};

vector<Result> result_list;


static void fatalError(const char *message)
{
  fprintf(stderr, "%s: %s\n", program_name, message);
  exit(1);
}

void setModelMatrix()
{
  model = quad2quad(corners, moved_corners);
}

void initCornersFromBox(const float4 box, float2 corners[4])
{
  corners[0] = box.xy;
  corners[1] = box.zy;
  corners[2] = box.zw;
  corners[3] = box.xw;
}

void initModelAndViewMatrices()
{
  initCornersFromBox(box, corners);
  float4 moved_box = float4(canvas_width/2-0.95*canvas_height/2, 0.05*canvas_height,
                            canvas_width/2+0.95*canvas_height/2, 0.95*canvas_height);
  initCornersFromBox(moved_box, moved_corners);
  model = quad2quad(corners, moved_corners);

  setModelMatrix();
  view = float3x3(1,0,0,
                  0,1,0,
                  0,0,1);
  inverse_view = inverse(view);
}

static const char *path_string[] = {
"M 165.75684,328.89523 C 176.8971,324.86262 178.14514,323.23078 178.14502,322.27267z C 178.14514,321.59895 177.32776,320.73469 175.69287,319.6799z L 165.75684,328.89523 z M 176.98926,318.09348 C 177.75989,319.82209 178.86438,320.68635 180.30273,320.68625 C 181.07043,320.68635 183.06262,319.41414 186.2793,316.8696 C 189.49621,314.32527 191.15148,312.66927 191.24512,311.90158 C 190.57433,310.36654 189.6632,309.35873 188.51172,308.87814 C 184.7677,311.56771 180.92688,314.63948 176.98926,318.09348 L 176.98926,318.09348 z M 190.66943,307.8718 C 191.34337,308.82992 192.25597,309.88607 193.40723,311.04025 C 196.76768,309.40853 200.75205,306.8641 205.36035,303.40695 C 204.59287,301.48813 203.87217,300.09653 203.19824,299.23215 C 200.31846,300.96079 198.01426,302.35239 196.28564,303.40695 C 192.63829,305.7098 190.76622,307.19808 190.66943,307.8718 L 190.66943,307.8718 z M 160.14502,336.66916 C 160.33559,337.24639 160.6227,337.67852 161.00635,337.96555 L 161.15137,337.96555 C 162.68666,339.50372 164.07826,340.27276 165.32617,340.27267 C 166.09389,340.94366 167.39027,341.71123 169.21533,342.57541 C 171.5182,343.72686 172.95814,344.49443 173.53516,344.87814 C 174.58997,342.47881 175.11731,341.2791 175.11719,341.27902 C 175.11731,340.41485 174.39808,339.50225 172.95947,338.54123 L 170.79736,341.134 C 170.22328,341.23076 169.88783,341.2791 169.79102,341.27902 C 167.77552,341.2791 166.76771,340.12774 166.76758,337.82492 C 166.76771,337.15118 166.95961,335.99835 167.34326,334.36642 C 166.95961,333.59894 166.09535,332.49445 164.75049,331.05295 C 163.69594,332.30109 162.16078,334.17315 160.14502,336.66916 L 160.14502,336.66916 z M 205.36035,298.08078 C 205.93467,300.48032 206.79746,301.68002 207.94873,301.6799 C 208.33554,301.58334 209.05625,301.39145 210.11084,301.10422 C 217.88631,298.60825 221.77401,296.20737 221.77393,293.90158 L 221.77393,290.87814 C 218.02987,291.74253 212.55868,294.14341 205.36035,298.08078 L 205.36035,298.08078 z M 173.96582,337.10422 C 175.69446,338.06231 176.70227,338.54131 176.98926,338.54123 C 178.14368,338.54131 179.58362,337.58184 181.30908,335.66281 C 182.84729,334.03107 183.90344,332.59113 184.47754,331.34299 C 184.09387,330.38214 183.56652,329.42267 182.89551,328.46457 C 180.97668,329.13556 178.00012,332.01544 173.96582,337.10422 L 173.96582,337.10422 z M 184.47754,326.87814 C 184.47766,327.93586 185.39025,328.46466 187.21533,328.46457 C 188.46349,328.46466 190.21544,327.50446 192.47119,325.58395 C 194.72716,323.66364 195.85509,322.03108 195.85498,320.68625 C 195.85509,319.53499 195.13438,318.86262 193.69287,318.66916 C 191.9674,319.91731 190.19201,321.16536 188.3667,322.4133 C 185.77404,324.5257 184.47766,326.01398 184.47754,326.87814 L 184.47754,326.87814 z M 195.85498,316.65646 L 198.44775,319.10422 C 199.88633,319.10432 201.99863,318.33528 204.78467,316.79709 C 207.85507,315.07161 209.39023,313.63167 209.39014,312.47726 C 209.39023,311.61312 208.81455,310.65365 "
" 207.66309,309.59885 C 205.26377,310.26986 201.32774,312.6224 195.85498,316.65646 L 195.85498,316.65646 M 209.39014,308.87814 C 210.35117,310.60677 211.55087,311.47103 212.98926,311.47092 C 215.10165,311.47103 217.35751,310.89535 219.75684,309.74387 C 222.54305,308.30258 223.93611,306.6224 223.93603,304.70334 L 223.93603,302.83127 C 217.79256,303.69565 212.94394,305.71127 209.39014,308.87814 L 209.39014,308.87814 z M 261.51807,293.04025 L 262.09375,296.49435 C 263.63187,297.16538 265.50394,297.50083 267.70996,297.5007 C 272.70218,297.50083 275.53518,296.49302 276.20898,294.47726 C 276.49612,294.09361 276.78323,293.6146 277.07031,293.04025 C 277.16702,293.13413 277.31057,293.22935 277.50098,293.3259 C 277.88772,293.32603 278.22463,292.79868 278.51172,291.74387 C 278.70217,291.07017 278.84573,290.39781 278.94238,289.72678 C 280.09377,289.4398 280.66945,288.28844 280.66943,286.27267 L 280.66943,281.23215 C 278.07961,281.03893 275.72854,280.94225 273.61621,280.94211 L 271.4541,280.94211 C 270.30277,280.94225 268.81449,280.99059 266.98926,281.08713 C 264.58988,281.18395 263.10307,281.23229 262.52881,281.23215 C 262.71928,282.09655 263.10307,283.24791 263.68018,284.68625 C 266.94388,285.55064 270.73489,286.6068 275.05322,287.85471 C 275.05325,292.07945 270.54154,293.80796 261.51807,293.04025 L 261.51807,293.04025 z M 170.3667,410.54123 C 170.36683,414.28538 171.68665,417.50144 174.32617,420.18942 C 176.96595,422.87741 180.20618,424.2214 184.04687,424.22141 C 187.79113,424.2214 191.00719,422.87741 193.69507,420.18942 C 196.38316,417.50144 197.72715,414.28538 197.72705,410.54123 C 197.72715,404.20726 194.7506,399.93578 188.79736,397.72678 L 189.80811,393.83762 "
"C 191.24669,393.16675 191.96593,391.58325 191.96582,389.08713 C 191.96593,388.31959 191.77404,387.83912 191.39014,387.64572 C 191.67736,385.14967 192.58995,381.50221 194.12793,376.70334 C 202.86436,348.86259 216.73641,331.63019 235.74414,325.00607 C 239.58209,323.66145 243.13434,322.98908 246.40088,322.98898 C 248.31988,322.98908 249.66314,323.27766 250.43066,323.85471 C 248.79888,326.73469 242.12652,328.9422 230.41357,330.47726 C 238.38239,330.47736 244.76617,329.37433 249.56494,327.16818 L 250.28564,327.59885 C 250.09527,328.55988 249.85503,329.47248 249.56494,330.33664 C 243.71148,331.39142 239.00788,332.59113 235.4541,333.93576 C 225.66316,337.77374 218.03133,343.5811 212.55859,351.35788 C 207.08603,359.1348 204.34971,368.2073 204.34961,378.57541 C 204.34971,393.07153 208.88559,404.9514 217.95728,414.21506 C 227.02913,423.47873 238.81305,428.11056 253.30908,428.11057 C 267.61478,428.11056 279.32766,423.11838 288.44775,413.134 C 297.37452,403.53344 301.83789,391.48511 301.83789,376.98898 C 301.83789,364.41482 297.23023,353.56767 288.01489,344.44748 C 278.79958,335.32745 267.95169,330.7674 255.47119,330.7673 C 254.80034,330.48029 254.22466,330.04816 253.74414,329.47092 L 253.74414,327.16818 C 255.66313,327.0716 256.38237,327.02326 255.90186,327.02316 C 256.86284,327.02326 258.25517,327.23932 260.07886,327.67136 C 261.90263,328.10358 263.24662,328.31965 264.11084,328.31955 C 265.07181,328.31965 265.55228,327.93586 265.55225,327.16818 C 265.55228,326.4007 262.33549,325.43977 255.90186,324.28537 C 255.42143,323.90168 255.1812,322.79865 255.18115,320.97629 C 255.1812,321.2635 255.1812,320.30256 255.18115,318.09348 C 256.6226,316.65511 258.06254,314.73616 259.50098,312.33664 C 259.11723,311.95003 258.58989,311.56478 257.91895,311.18088 C 257.15141,312.23861 256.23882,313.67855 255.18115,315.5007 L 253.74414,315.5007 C 253.83794,313.19808 253.88481,311.47103 253.88477,310.31955 C 253.88481,308.97494 253.83794,307.67855 253.74414,306.43039 C 254.60845,305.18246 255.04057,302.78305 255.04053,299.23215 C 255.99858,298.27134 257.34184,297.79087 259.07031,297.79074 C 259.55082,297.40708 259.79106,296.87974 259.79102,296.20871 C 259.79106,294.67075 258.97514,293.6146 257.34326,293.04025 C 258.39799,289.77671 259.5977,287.71275 260.94238,286.84836 L 260.94238,281.80783 C 258.34965,281.80797 255.03764,282.14342 251.00635,282.81418 C 246.20758,283.48815 243.08746,284.3524 241.646,285.40695 C 241.83942,286.46178 242.12799,287.37437 242.51172,288.14474 L 242.3667,288.28537 C 242.94391,288.95933 247.93609,289.29625 257.34326,289.29611 L 256.04687,293.47092 C 252.68657,294.90952 248.94244,295.62876 244.81445,295.62863 C 243.086,295.62876 240.87848,294.23716 238.19189,291.45383 C 238.95954,290.78306 239.53522,290.1107 239.91895,289.43674 C 239.91901,288.76597 239.91901,287.9984 239.91895,287.134 C 239.91901,286.1732 239.67877,285.69273 239.19824,285.6926 C 237.85358,285.69273 235.21393,286.26988 231.2793,287.42404 C 228.49617,288.19176 225.7115,289.00767 222.92529,289.8718 L 222.92529,293.90158 C 228.39802,293.90171 232.62263,293.27769 235.59912,292.02951"
"C 236.46344,292.12632 239.00714,293.90244 243.23022,297.35788 C 247.45342,300.81357 249.56499,302.82992 249.56494,303.40695 L 249.56494,304.70334 C 247.74273,304.70346 245.87066,303.88754 243.94873,302.25558 "
"C 242.51031,300.72055 241.0235,299.13559 239.48828,297.5007 C 238.33405,297.59751 236.07819,298.22153 232.7207,299.37277 C 228.97664,300.71762 226.57576,301.48666 225.51807,301.6799 C 225.90193,304.07943 227.10164,305.27914 229.11719,305.27902 C 230.65534,305.27914 232.96027,304.67929 236.03198,303.47946 C 239.10382,302.27988 240.59137,301.68002 240.49463,301.6799 C 240.87848,301.68002 242.24664,302.52011 244.59912,304.20016 C 246.95172,305.88046 248.46343,306.95931 249.13428,307.43674 L 249.13428,308.87814 C 248.17339,308.87826 246.80523,308.59042 245.02978,308.01462 C 243.25445,307.43905 241.88629,307.15121 240.92529,307.15109 C 239.10309,307.15121 237.80817,307.91879 237.04053,309.45383 L 241.07031,310.02951 C 242.31842,309.45541 243.42291,309.1683 244.38379,309.16818 C 245.919,309.1683 247.5025,309.93587 249.13428,311.47092 C 248.36675,312.71907 247.16705,314.20735 245.53516,315.93576 C 244.19049,316.31966 242.79815,316.75179 241.35815,317.23215 C 239.91827,317.71272 239.1983,318.72053 239.19824,320.25558 C 231.42292,323.42268 225.27937,326.61457 220.76758,329.83127 C 216.25594,333.04816 211.83945,337.43975 207.51807,343.00607 C 207.13437,343.48662 206.46201,344.11064 205.50098,344.87814 C 205.02353,345.16533 204.23252,345.6209 203.12793,346.24484 C 202.02354,346.86894 200.94322,347.49297 199.88696,348.11691 C 198.83091,348.74101 197.48692,349.05302 195.85498,349.05295 C 194.70372,349.05302 194.12804,348.429 194.12793,347.18088 C 194.12804,345.35869 195.75987,343.87188 199.02344,342.72043 C 201.61631,341.75957 204.01572,341.2791 206.22168,341.27902 C 206.12803,339.36016 204.35264,338.40069 200.89551,338.4006 C 199.93467,338.40069 198.494,338.68853 196.57349,339.26413 C 194.65318,339.8399 193.21398,340.17608 192.25586,340.27267 L 190.23877,338.68625 C 189.66173,338.58965 188.9425,338.54131 188.08105,338.54123 C 185.58508,338.54131 184.33703,339.11846 184.33691,340.27267 C 184.33703,340.84698 186.92834,341.75811 192.11084,343.00607 C 192.20763,344.54131 192.30431,346.07793 192.40088,347.61594 C 192.78478,349.15117 193.98448,349.91874 196,349.91867 C 198.4962,349.91874 201.03916,349.24638 203.62891,347.90158 C 196.6212,361.63016 191.63048,374.54274 188.65674,386.63937 C 187.31213,386.73609 186.63976,388.36792 186.63965,391.53488 C 186.63976,392.30249 186.78332,392.87817 187.07031,393.26193 L 186.20898,397.00607 C 185.43859,396.90942 184.71789,396.86108 184.04687,396.86105 C 180.20618,396.86108 176.96595,398.18164 174.32617,400.82272 C 171.68665,403.46386 170.36683,406.70336 170.3667,410.54123 L 170.3667,410.54123 z M 244.81445,319.6799 C 245.58209,318.91243 247.16558,317.23225 249.56494,314.63937 L 249.56494,320.25558 L 244.81445,319.6799 z M 173.10449,405.36008 C 173.39173,404.30248 174.11097,403.24633 175.26221,402.19162 L 181.74414,409.38986 L 173.10449,405.36008 z M 175.98291,401.61594 C 176.75061,400.7517 177.71009,400.12768 178.86133,399.74387 L 182.60547,408.66916 L 175.98291,401.61594 z M 171.80811,410.25558 C 171.90199,409.39134 172.18909,408.19164 172.66943,406.65646 L 181.4541,410.25558 L 171.80811,410.25558 z M 180.01709,399.02316"
"C 180.87854,398.73608 181.64612,398.59252 182.31982,398.5925 L 183.32617,398.5925 L 183.47119,408.09348 L 180.01709,399.02316 z M 184.47754,398.5925 L 185.62891,398.73312 C 185.15148,401.32592 184.7677,403.38988 184.47754,404.92502 L 184.47754,398.5925 z M 171.80811,411.11691 L 181.4541,411.11691 L 172.66943,415.15109 C 172.18909,413.61595 171.90199,412.27122 171.80811,411.11691 L 171.80811,411.11691 z M 218.46484,347.18088 L 224.3667,342.14474 L 248.55859,373.96555 L 218.46484,347.18088 z M 212.84863,354.38351 C 213.32626,352.46171 214.90975,350.44609 217.59912,348.33664 L 247.69287,374.97629 L 212.84863,354.38351 z M 185.77393,408.66916 L 188.94238,399.30881 C 190.47765,399.98266 191.58214,400.70336 192.25586,401.47092 L 185.77393,408.66916 z M 225.66309,341.27902 C 228.44636,339.55059 230.607,338.35089 232.14502,337.6799 L 249.56494,372.9592 L 225.66309,341.27902 z M 242.08105,333.64572 C 244.28717,332.97491 246.83013,332.54279 249.70996,332.34933 L 249.56494,361.8718 L 242.08105,333.64572 z M 173.24512,416.30246 L 181.74414,412.27267 L 175.11719,418.89523 C 174.63978,418.51145 174.01575,417.64719 173.24512,416.30246 L 173.24512,416.30246 z M 208.52881,363.16818 C 209.48691,360.95926 210.68661,358.41483 212.12793,355.53488 L 246.83154,376.12766 L 208.52881,363.16818 z M 182.75049,410.54123 C 182.75061,409.77367 183.1344,409.38988 183.90186,409.38986 C 184.86291,409.38988 185.34338,409.822 185.34326,410.68625 C 185.34338,411.45384 184.86291,411.83763 183.90186,411.83762 C 183.1344,411.83763 182.75061,411.4055 182.75049,410.54123 L 182.75049,410.54123 z M 233.43701,336.9592 C 236.02985,335.71124 238.33405,334.75177 240.34961,334.08078 L 251.00635,372.81418 L 233.43701,336.9592 z M 175.98291,419.75656 L 182.75049,412.70334 L 178.86133,421.62863 C 177.42298,420.95774 176.4635,420.33371 175.98291,419.75656 L 175.98291,419.75656 z M 186.34961,409.53488 L 193.40723,402.47726 C 194.27159,403.43822 194.84727,404.44603 195.13428,405.5007 L 186.34961,409.53488 z M 206.65674,371.66281 L 208.09375,364.60519 L 246.40088,377.42404 L 206.65674,371.66281 z M 179.87207,422.06369 L 183.61621,413.134 L "
"183.47119,422.63937 L 182.89551,422.63937 C 182.2218,422.63937 181.21399,422.44748 179.87207,422.06369 L 179.87207,422.06369 z M 186.49463,410.25558 L 195.56494,406.65646 C 195.95177,407.42406 196.14513,408.28685 196.14502,409.24484 L 196.14502,409.6799 L 196.14502,410.25558 L 186.49463,410.25558 z M 206.22168,380.73312 L 206.3667,372.9592 L 246.11084,378.57541 L 206.22168,380.73312 z M 184.47754,422.63937 L 184.47754,413.134 L 187.93603,421.91867 C 187.16857,422.39914 186.16076,422.63937 184.9126,422.63937 L 184.47754,422.63937 z M 186.49463,411.11691 L 196.14502,411.40695 L 196.14502,411.55197 C 196.14513,412.1262 195.90489,413.18235 195.42432,414.72043 L 186.49463,411.11691 z M 254.75049,362.44748 L 254.75049,332.49435 L 254.89551,332.49435 L 255.90186,332.49435 C 257.24663,332.49445 258.54301,332.59113 259.79102,332.78439 L 254.75049,362.44748 z M 185.34326,412.70334 L 191.53516,419.90158 C 191.34191,420.09494 190.52599,420.57541 189.0874,421.34299 L 185.34326,412.70334 z M 186.06396,411.98264 L 194.84863,415.8718 C 194.5587,416.73606 193.78966,417.79221 192.5415,419.04025 L 186.06396,411.98264 z M 256.19189,362.01682 L 261.23242,333.21506 C 263.15141,333.21515 265.35892,333.69562 267.85498,334.65646 L 258.20898,361.72678 L 256.19189,362.01682 z M 206.22168,382.46457 L 246.25586,379.8718 L 207.23242,389.37277 C 206.55869,386.68629 206.22178,384.38355 206.22168,382.46457 L 206.22168,382.46457 z M 259.50098,361.8718 L 269.43701,335.08713 C 271.26224,335.75811 273.42288,336.81427 275.91895,338.25558 L 261.80811,363.02316 C 261.51811,362.63943 260.74906,362.25565 259.50098,361.8718 L 259.50098,361.8718 z M 207.66309,390.81418 L 246.5415,381.16818 L 210.5415,399.02316 C 209.10312,396.33374 208.14365,393.59741 207.66309,390.81418 L 207.66309,390.81418 z M 210.97656,400.75021 L 242.3667,384.47726 C 242.07965,385.43824 240.97516,386.73463 239.05322,388.36642 C 239.05329,388.36646 236.41364,390.28687 231.13428,394.12766 L 214.43066,406.51144 L 210.97656,400.75021 z M 254.75049,372.81418 C 254.94389,370.41482 255.4727,367.00759 256.33691,362.5925 L 257.62891,363.30881 L 254.75049,372.81418 z M 256.04687,372.9592 C 256.1436,372.57546 257.00786,369.64724 258.63965,364.17453 C 258.9268,364.55838 259.07036,365.08572 259.07031,365.75656 C 259.07036,367.19802 258.06254,369.5989 256.04687,372.9592 L 256.04687,372.9592 z M 260.79736,369.21506 C 261.47123,368.25418 261.97587,367.14968 262.31128,365.90158 C 262.64677,364.65359 262.81449,363.9827 262.81445,363.88889 L 277.36035,338.83127 C 279.376,340.0794 281.48684,341.66289 283.69287,343.58176 L 260.79736,369.21506 z M 215.43701,407.80783 L 238.62256,390.52853 C 238.52594,390.81568 238.4776,391.10279 238.47754,391.38986 C 238.4776,392.15747 238.81452,392.54126 239.48828,392.54123 L 220.62256,413.42404 C 218.22323,411.59886 216.49471,409.72679 215.43701,407.80783 L 215.43701,407.80783 z M 239.77393,390.09348 C 239.77399,389.90308 242.31842,387.64722 247.40723,383.3259 C 246.25591,384.95777 244.09527,387.45386 240.92529,390.81418 L 240.06396,391.10422 C 240.06403,391.00757 240.01569,390.83911 239.91895,390.59885"
"C 239.82233,390.35865 239.77399,390.19019 239.77393,390.09348 L 239.77393,390.09348 z M 251.29639,379.00607 C 251.29644,377.95143 251.82378,377.42409 252.87842,377.42404 C 254.02983,377.42409 254.60552,377.95143 254.60547,379.00607 C 254.60552,380.06373 254.02983,380.59254 252.87842,380.5925 C 251.82378,380.59254 251.29644,380.06373 251.29639,379.00607 L 251.29639,379.00607 z M 257.62891,374.4006 L 285.13428,344.73312 C 286.95949,346.17461 288.59132,347.95146 290.02978,350.06369 L 257.62891,374.4006 z M 242.65674,390.9592 C 245.44,387.98267 247.40728,385.72681 248.55859,384.19162 L 244.38379,391.10422 C 244.19049,391.198 243.95025,391.24488 243.66309,391.24484 C 243.27936,391.24488 242.94391,391.14966 242.65674,390.9592 L 242.65674,390.9592 z M 221.91895,414.86105 L 240.92529,392.97629 C 241.21539,393.07007 241.50397,393.11694 241.79102,393.11691 C 242.36822,393.11694 243.04059,392.97339 243.80811,392.68625 L 228.25586,419.18088 C 225.95027,417.83909 223.83797,416.39915 221.91895,414.86105 L 221.91895,414.86105 z M 258.49463,375.26193 L 291.04053,351.36008 C 292.57569,353.37577 293.91895,355.48661 295.07031,357.6926 L 258.49463,375.26193 z M 229.55225,420.19162 L 249.85498,384.91232 L 236.89551,423.21506 C 233.6319,422.15744 231.18415,421.14963 229.55225,420.19162 L 229.55225,420.19162 z M 259.07031,376.27267 L 295.79102,359.42404 C 296.84571,361.15262 297.70997,363.60037 298.38379,366.7673 L 259.07031,376.27267 z M 238.47754,423.64572 L 251.00635,385.34299 L 245.39014,425.51779 C 243.75836,425.32736 241.45416,424.70334 238.47754,423.64572 L 238.47754,423.64572 z M 259.50098,377.56467 L 298.81445,368.34933 C 299.3916,370.27126 299.68018,372.95925 299.68018,376.4133 L 259.50098,377.56467 z M 247.11719,425.80783 L 252.30273,385.62863 L 254.75049,426.23849 C 254.17339,426.33517 253.50102,426.38351 252.7334,426.38351 C 250.5274,426.38351 248.65533,426.19162 247.11719,425.80783 L 247.11719,425.80783 z M 259.93603,378.57541 L 299.68018,378.14474 L 299.68018,379.43674 C 299.77393,381.35865 299.58203,383.37574 299.10449,385.48801 L 259.93603,378.57541 z M 253.4541,385.48801 L 263.8208,425.37277 C 261.03764,425.94992 258.58989,426.23849 256.47754,426.23849 L 253.4541,385.48801 z M 259.79102,380.01682 L 298.95947,387.07004 C 298.67237,388.79859 298,391.19946 296.94238,394.27267 L 259.79102,380.01682 z M 255.04053,385.48801 L 272.89551,422.20871 C 270.97659,423.2634 268.52884,424.12619 265.55225,424.79709 L 255.04053,385.48801 z M 259.36035,381.45383 L 296.51172,395.70969 C 295.55079,398.49584 294.54298,400.70483 293.48828,402.33664 L 259.36035,381.45383 z M 256.33691,384.62228 C 262.00004,392.01392 270.25589,402.86254 281.10449,417.16818 C 279.47268,418.80002 277.2637,420.19162 274.47754,421.34299 L 256.33691,384.62228 z M 258.63965,382.75021 L 292.62256,403.77365 C 291.37452,405.98265 289.83937,408.19164 288.01709,410.4006 L 258.63965,382.75021 z M 257.62891,383.75656 L 287.00635,411.6926 C 286.33546,412.75022 284.80031,414.2385 282.40088,416.15744 L 257.62891,383.75656 z ",

"M 100 100 L 200 100 L 200 200 L 150 150 L 100 200 z",

"M100,180 L40,10 L190,120 L10,120 L160,10 z",  // star

"M300 300 C 100 400,100 200,300 100,500 200,500 400,300 300Z", // heart

"M300 300 C 100 400,100 200,300 100,500 200,500 400,300 300Z M100,180 L40,10 L190,120 L10,120 L160,10 z", // heart+star

"M50,50 Q-30,100 50,150 Q100,230 150,150 Q230,100 150,50 Q100,-30 50,50 z", // quad

"M50,50 Q-30,100 50,150 Q100,230 150,150 Q230,100 150,50 z", // quad

"M50,50 Q-30,100 50,150  z", // quad

"M50,150 Q100,230 150,150 z", // quad

"M 141.113281,358.886719C 482.000031,131.000015 25.390625,213.623047 239,228.000015C 213.623047,25.390625 182,447.000031 252,275C 474.609375,213.623047 474.609375,286.376953 273,191.000015C 286.376953,474.609375 213.623047,474.609375 141.113281,358.886719z", // hard path1

"M 10 10 C 20 20 50 10 30 70 z",
"M 67.304417,87.23545 L 67.304417,85.119048 C 67.304417,85.119048 60.69066,85.251323 58.838808,83.796297 C 56.986956,82.34127 55.79648,79.828043 55.79648,75.992064 C 55.79648,72.156085 55.79648,63.955027 55.79648,63.955027 C 55.79648,63.955027 73.389073,62.103174 78.944629,56.547619 C 84.500184,50.992063 86.087485,41.997355 86.087485,36.441799 C 86.087485,33.664021 86.116596,26.197958 86.116596,22.294963 C 86.116596,19.911083 86.537841,15.666579 89.773194,15.666579 C 91.38192,15.666579 93.891718,15.674603 93.891718,15.674603 L 93.891718,12.896826 C 93.891718,12.896826 90.452565,12.76455 88.336163,12.76455 C 86.219761,12.76455 81.127168,13.095238 78.547803,15.674603 C 75.968438,18.253969 74.314999,25.330688 74.314999,37.5 C 74.314999,49.669313 73.256798,52.976191 70.21447,56.018519 C 65.650499,60.58249 55.79648,60.912699 55.79648,60.912699 C 55.79648,60.912699 55.79648,30.224868 55.79648,25.992064 C 55.79648,21.75926 55.664205,19.510582 57.648332,17.526455 C 59.632459,15.542328 66.246216,15.806879 66.246216,15.806879 L 66.246216,12.764551 L 33.753784,12.764551 L 33.753784,15.806879 C 33.753784,15.806879 40.367541,15.542328 42.351668,17.526455 C 44.335795,19.510582 44.20352,21.75926 44.20352,25.992064 "
"C 44.20352,30.224868 44.20352,60.912699 44.20352,60.912699 C 44.20352,60.912699 34.349501,60.58249 29.78553,56.018519 C 26.743202,52.976191 25.685001,49.669313 25.685001,37.5 C 25.685001,25.330688 24.031562,18.253969 21.452197,15.674603 C 18.872832,13.095238 13.780239,12.76455 11.663837,12.76455 C 9.5474351,12.76455 6.1082819,12.896826 6.1082819,12.896826 L 6.1082819,15.674603 C 6.1082819,15.674603 8.6180798,15.666579 10.226806,15.666579 C 13.462159,15.666579 13.883404,19.911083 13.883404,22.294963 C 13.883404,26.197958 13.912515,33.664021 13.912515,36.441799 C 13.912515,41.997355 15.499816,50.992063 21.055371,56.547619 C 26.610927,62.103174 44.20352,63.955027 44.20352,63.955027 C 44.20352,63.955027 44.20352,72.156085 44.20352,75.992064 C 44.20352,79.828043 43.013044,82.34127 41.161192,83.796297 C 39.30934,85.251323 32.695583,85.119048 32.695583,85.119048 L 32.695583,87.23545 z",
"M204.33 139.83 C196.33 133.33 206.68 132.82 206.58 132.58 C192.33 97.08 169.35     81.41 167.58 80.58 C162.12 78.02 159.48 78.26 160.45 76.97 C161.41 75.68 167.72 79.72 168.58     80.33 C193.83 98.33 207.58 132.33 207.58 132.33 C207.58 132.33 209.33 133.33 209.58 132.58     C219.58 103.08 239.58 87.58 246.33 81.33 C253.08 75.08 256.63 74.47 247.33 81.58 C218.58 103.58     210.34 132.23 210.83 132.33 C222.33 134.83 211.33 140.33 211.83 139.83 C214.85 136.81 214.83 145.83 214.83     145.83 C214.83 145.83 231.83 110.83 298.33 66.33 C302.43 63.59 445.83 -14.67 395.83 80.83 C393.24 85.79 375.83     105.83 375.83 105.83 C375.83 105.83 377.33 114.33 371.33 121.33 C370.3 122.53 367.83 134.33 361.83 140.83 C360.14 142.67    361.81 139.25 361.83 140.83 C362.33 170.83 337.76 170.17 339.33 170.33 C348.83 171.33 350.19 183.66 350.33 183.83 C355.83     190.33 353.83 191.83 355.83 194.83 C366.63 211.02 355.24 210.05 356.83 212.83 C360.83 219.83 355.99 222.72 357.33 224.83     C360.83 230.33 354.75 233.84 354.83 235.33 C355.33 243.83 349.67 240.73 349.83 244.33 C350.33 255.33 346.33 250.83 343.83 254.83     C336.33 266.83 333.46 262.38 332.83 263.83 "
"C329.83 270.83 325.81 269.15 324.33 270.83 C320.83 274.83 317.33 274.83 315.83 276.33    C308.83 283.33 304.86 278.39 303.83 278.83 C287.83 285.83 280.33 280.17 277.83 280.33 C270.33 280.83 271.48 279.67 269.33 277.83     C237.83 250.83 219.33 211.83 215.83 206.83 C214.4 204.79 211.35 193.12 212.33 195.83 C214.33 201.33 213.33 250.33 207.83 250.33     C202.33 250.33 201.83 204.33 205.33 195.83 C206.43 193.16 204.4 203.72 201.79 206.83 C196.33 213.33 179.5 250.83 147.59 277.83     C145.42 279.67 146.58 280.83 138.98 280.33 C136.46 280.17 128.85 285.83 112.65 278.83 C111.61 278.39 107.58 283.33 100.49 276.33     C98.97 274.83 95.43 274.83 91.88 270.83 C90.39 269.15 86.31 270.83 83.27 263.83 C82.64 262.38 79.73 266.83 72.13 254.83 C69.6 250.83     65.54 255.33 66.05 244.33 C66.22 240.73 60.48 243.83 60.99 235.33 C61.08 233.84 54.91 230.33 58.45 224.83 C59.81 222.72 54.91 219.83     58.96 212.83 C60.57 210.05 49.04 211.02 59.97 194.83 C62 191.83 59.97 190.33 65.54 183.83 C65.69 183.66 67.06 171.33 76.69 170.33     C78.28 170.17 53.39 170.83 53.9 140.83 C53.92 139.25 55.61 142.67 53.9 140.83 C47.82 134.33 45.32 122.53 44.27 121.33 C38.19 114.33     39.71 105.83 39.71 105.83 "
"C39.71 105.83 22.08 85.79 19.46 80.83 C-31.19 -14.67 114.07 63.59 118.22 66.33 C185.58 110.83 202 145.83     202 145.83 C202 145.83 202.36 143.28 203 141.83 C203.64 140.39 204.56 140.02 204.33 139.83 z",
"M600,350 l 50,-25 a25,25 -30 0,1 50,-25 l 50,-25 a25,50 -30 0,1 50,-25 l 50,-25 a25,75 -30 0,1 50,-25 l 50,-25 a25,100 -30 0,1 50,-25 l 50,-25",
"M300,200 h-150 a150,150 0 1,0 150,-150 z",
"M275,175 v-150 a150,150 0 0,0 -150,150 z",

"M 25.182187,9.5141697 A 7.1255059,11.295547 0 1 1 10.931175,9.5141697 A 7.1255059,11.295547 0 1 1 25.182187,9.5141697 z",
"M 25.182187,9.5141697 A 7.1255059,11.295547 0 1 1 10.931175,9.5141697 A 7.1255059,11.295547 0 1 1 25.182187,9.5141697",
"M 18.542509,12.307693 A 2.2672064,3.4008098 0 0 1 14.008446,12.367372"
"M 25.182187,9.5141697 A 7.1255059,11.295547 0 1 1 10.931175,9.5141697 A 7.1255059,11.295547 0 1 1 25.182187,9.5141697",

"M 343.4375 242.91666666666671 C 428.4375 91.25 232.62 131.86670000000001 409.0625 205.41666666666671", // cubic loop

};
static const int num_path_strings = sizeof(path_string)/sizeof(path_string[0]);

GLuint path_obj = 42;
int cur_path = 0;
bool dashing = false;
bool use_glyph_path = false;
int character_point = 'A';

void initPathObject()
{
  if (use_glyph_path) {
    glDeletePathsNV(path_obj, 1);
    glPathGlyphRangeNV(path_obj, GL_STANDARD_FONT_NAME_NV, "Serif", GL_BOLD_BIT_NV,
        character_point, 1, GL_USE_MISSING_GLYPH_NV, ~0, 2048);
  } else {
    const char *str = path_string[cur_path];
    glPathStringNV(path_obj, GL_PATH_FORMAT_SVG_NV, (GLsizei)strlen(str), str);
  }
  GLfloat bounds[4];
  glGetPathParameterfvNV(path_obj, GL_PATH_OBJECT_BOUNDING_BOX_NV, bounds);
  box = float4(bounds[0], bounds[1], bounds[2], bounds[3]);
  if (verbose) {
    printf("path bounds = (%f,%f) to (%f,%f)\n", bounds[0], bounds[1], bounds[2], bounds[3]);
  }
  glPathParameterfNV(path_obj, GL_PATH_STROKE_WIDTH_NV, 0.01*max(box.z-box.x, box.w-box.y));
  glPathParameteriNV(path_obj, GL_PATH_DASH_CAPS_NV, GL_ROUND_NV);
  if (dashing) {
    GLfloat dash_array[3] = { 20,5 };
    glPathDashArrayNV(path_obj, 2, dash_array);
  }
  initModelAndViewMatrices();
  result_list.clear();
}

void initGraphics()
{
  /* Use an orthographic path-to-clip-space transform to map the
     [0..640]x[0..480] range of the star's path coordinates to the [-1..1]
     clip space cube: */
  glMatrixLoadIdentityEXT(GL_PROJECTION);
  glMatrixOrthoEXT(GL_PROJECTION, 0, canvas_width, canvas_height, 0, -1, 1);
  glMatrixLoadIdentityEXT(GL_MODELVIEW);

  /* Before rendering to a window with a stencil buffer, clear the stencil
  buffer to zero and the color buffer to blue: */
  glClearStencil(0);
  glClearColor(0.1, 0.3, 0.6, 0.0);

  glPointSize(3.0);

  initPathObject();

  glEnable(GL_STENCIL_TEST);
  glStencilFunc(GL_NOTEQUAL, 0, 0x1F);
  glStencilOp(GL_KEEP, GL_KEEP, GL_ZERO);

  glEnable(GL_LINE_STIPPLE);
  glLineStipple(3, 0x8888);
}

void display(void)
{
  glClear(GL_COLOR_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
  glMatrixPushEXT(GL_MODELVIEW); {
    float3x3 mat;

    mat = mul(view, model);
    MatrixLoadToGL(mat);
    glEnable(GL_STENCIL_TEST);
    if (filling) {
      glColor3f(1,1,1);
      glStencilFillPathNV(path_obj, GL_COUNT_UP_NV, 0xFF);
      glCoverFillPathNV(path_obj, GL_BOUNDING_BOX_NV);
    }
    if (stroking) {
      glColor3f(0,0,0);
      glStencilStrokePathNV(path_obj, 1, 0xFF);
      glCoverStrokePathNV(path_obj, GL_BOUNDING_BOX_NV);
    }

    glDisable(GL_STENCIL_TEST);
    glBegin(GL_POINTS); {
        for (size_t i=0; i<result_list.size(); i++) {
            float3 color = float3(1,0,0);
            if (result_list[i].in_fill) color.rg = float2(0,1);
            if (result_list[i].in_stroke) color.b = 1;
            glColor3f(color.r, color.g, color.b);
            glVertex2f(result_list[i].p.x, result_list[i].p.y);
        }
    } glEnd();
  } glMatrixPopEXT(GL_MODELVIEW);
  glDisable(GL_STENCIL_TEST);
  if (show_bounding_box) {
      glMatrixPushEXT(GL_MODELVIEW); {
          MatrixLoadToGL(view);
          glDisable(GL_STENCIL_TEST);
          glColor3f(1,1,0);
          glBegin(GL_LINE_LOOP); {
              for (int i=0; i<4; i++) {
                  glVertex2f(moved_corners[i].x, moved_corners[i].y);
              }
          } glEnd();
          glColor3f(1,0,1);
          glBegin(GL_POINTS); {
              for (int i=0; i<4; i++) {
                  glVertex2f(moved_corners[i].x, moved_corners[i].y);
              }
          } glEnd();
      } glMatrixPopEXT(GL_MODELVIEW);
  }
  handleFPS(&gl_fps_context);

  glutSwapBuffers();
}

float window_width, window_height;
float view_width, view_height;
float3x3 win2view, view2win;

void configureProjection()
{
  float3x3 iproj, viewport;

  viewport = ortho(0,window_width, 0,window_height);
  float left = 0, right = canvas_width, top = 0, bottom = canvas_height;
  glMatrixLoadIdentityEXT(GL_PROJECTION);
  glMatrixOrthoEXT(GL_PROJECTION, left, right, bottom, top, -1, 1);
  iproj = inverse_ortho(left, right, top, bottom);
  view_width = right - left;
  view_height = bottom - top;
  win2view = mul(iproj, viewport);
  view2win = inverse(win2view);
}

int iheight;

void reshape(int w, int h)
{
  reshapeFPScontext(&gl_fps_context, w, h);
  glViewport(0,0,w,h);
  iheight = h-1;
  window_width = w;
  window_height = h;

  configureProjection();
}

int animated_point = 0;
int last_time = 0;
float2 initial_point;
int flip = 1;

void idle()
{
  int now = glutGet(GLUT_ELAPSED_TIME);
  int elapsed = now-last_time;
  float t = 0.0007*(elapsed);

  // (x,y) of Figure-eight knot
  // http://en.wikipedia.org/wiki/Figure-eight_knot_%28mathematics%29
  float x = (2+::cos(2*t))*::cos(3*t) - 3;  // bias by -3 so t=0 is @ (0,0)
  float y = (2+::cos(2*t))*::sin(3*t);
  // Flip the sense of x & y to avoid a bias in a particular direction over time.
  if (flip & 2) {
    x = -x;
    y = -y;
  }
  float radius = 20;
  float2 xy = radius*float2(x,y);
  moved_corners[animated_point] = initial_point + xy;
  setModelMatrix();

  if (elapsed > 3500) {
    if (animated_point == 3) {
      flip++;
    }
    animated_point = (animated_point+1)%4;
    initial_point = moved_corners[animated_point];
    last_time = now;
  }

  glutPostRedisplay();
}

float2 project(float3 v)
{
  return v.xy/v.z;
}

void
checkPoint(float2 win, bool report)
{
    float3 clipp = mul(win2view, float3(win,1));

    float3x3 mat, inv_mat;
    mat = mul(view, model);
    inv_mat = inverse(mat);

    float2 objp = project(mul(inv_mat, clipp));
    GLboolean in_fill = glIsPointInFillPathNV(path_obj, 0xFF, objp.x, objp.y);
    GLboolean in_stroke = glIsPointInStrokePathNV(path_obj, objp.x, objp.y);
    Result r(!!in_fill, !!in_stroke, objp);
    result_list.push_back(r);
    glutPostRedisplay();

    if (report) {
      printf("objp = %f,%f -- fill=%d, stroke=%d\n\n",
        float(objp.x), float(objp.y),
        in_fill, in_stroke);
    }
}

void applyBedOfNails()
{
    float spaces = 30;

    for (int j=0; j<spaces; j++) {
        float y = (j+0.5) * window_height/spaces;
        for (int i=0; i<spaces; i++) {
            float x = (i+0.5) * window_width/spaces;
            checkPoint(float2(x, y), false);
        }
    }
}

void
keyboard(unsigned char c, int x, int y)
{
  switch (c) {
  case 27:  /* Esc quits */
    exit(0);
    return;
  case 'b':
    show_bounding_box = !show_bounding_box;
    break;
  case 13:  /* Enter redisplays */
    break;
  case 'c':
    result_list.clear();
    glutPostRedisplay();
    break;
  case 's':
    stroking = !stroking;
    break;
  case 'n':
    applyBedOfNails();
    break;
  case 'f':
    filling = !filling;
    break;
  case 'r':
    initModelAndViewMatrices();
    break;
  case '+':
    cur_path++;
    if (cur_path >= num_path_strings) {
        cur_path = 0;
    }
    initPathObject();
    break;
  case '-':
    cur_path--;
    if (cur_path < 0) {
        cur_path = num_path_strings-1;
    }
    initPathObject();
    break;
  case 'z':
    use_glyph_path = !use_glyph_path;
    initPathObject();
    break;
  case ',':
    character_point--;
    initPathObject();
    break;
  case '.':
    character_point++;
    initPathObject();
    break;
  case 'd':
    dashing = !dashing;
    initPathObject();
    break;
  case ' ':
    animating = !animating;
    if (animating) {
      last_time = glutGet(GLUT_ELAPSED_TIME);
      initial_point = moved_corners[animated_point];
      glutIdleFunc(idle);
      if (show_fps) {
        enableFPS();
      }
    } else {
      disableFPS();
      glutIdleFunc(NULL);
    }
    break;
  case 'v':
    enable_vsync = !enable_vsync;
    requestSynchornizedSwapBuffers(enable_vsync);
    break;
  case 'F':
    show_fps = !show_fps;
    if (show_fps) {
      enableFPS();
    } else {
      disableFPS();
    }
    break;
  default:
    return;
  }
  glutPostRedisplay();
}

int close_corner = -1;

void
mouse(int button, int state, int mouse_space_x, int mouse_space_y)
{
  if (button == GLUT_LEFT_BUTTON) {
    if (state == GLUT_DOWN) {
      float2 win = float2(mouse_space_x, mouse_space_y);

      float closest = 10;
      close_corner = -1;
      float2 close_corner_location;
      for (int i=0; i<4; i++) {
        float3 p = float3(moved_corners[i], 1);
        p = mul(view, p);
        p = mul(view2win, p);
        float2 window_p = project(p);
        float distance_to_corner = distance(window_p, win);
        if (distance_to_corner < closest) {
          close_corner = i;
          closest = distance_to_corner;
          close_corner_location = window_p;
        }
      }
      if (close_corner < 0) {
        if (verbose) {
          cout << "no corner near " << win << endl;
        }
      } else {
        if (verbose) {
          cout << "corner " << close_corner << " @ " << close_corner_location << " near " << win << endl;
        }
        zooming = 0;
        scaling = 0;
        return;
      }

#if 0
      float3 clipp = mul(win2view, float3(win,1));

      float3x3 mat, inv_mat;
      mat = mul(view, model);
      inv_mat = inverse(mat);

      float2 objp = project(mul(inv_mat, clipp));
      GLboolean in_fill = glIsPointInFillPathNV(path_obj, 0xFF, objp.x, objp.y);
      GLboolean in_stroke = glIsPointInStrokePathNV(path_obj, objp.x, objp.y);
      Result r(!!in_fill, !!in_stroke, objp);
      result_list.push_back(r);
      glutPostRedisplay();
#endif

      checkPoint(win, true);

      float3 clipp = mul(win2view, float3(win,1));
      anchor = project(clipp);
      rotate_x = mouse_space_x;
      scale_y = mouse_space_y;
      if (glutGetModifiers() & GLUT_ACTIVE_CTRL) {
        scaling = 0;
      } else {
        scaling = 1;
      }
      if (glutGetModifiers() & GLUT_ACTIVE_SHIFT) {
        zooming = 0;
      } else {
        zooming = 1;
      }
    } else {
      zooming = 0;
      scaling = 0;
      close_corner = -1;
    }
  }
  if (button == GLUT_MIDDLE_BUTTON) {
    if (state == GLUT_DOWN) {
      slide_y = mouse_space_y;
      slide_x = mouse_space_x;
      sliding = 1;
    } else {
      sliding = 0;
    }
  }
}

void
motion(int mouse_space_x, int mouse_space_y)
{
  if (close_corner >= 0) {
    assert(!zooming);
    assert(!scaling);
    float3 win = float3(mouse_space_x, mouse_space_y, 1);
    float3 p = mul(win2view, win);
    p = mul(inverse_view, p);
    float2 new_corner = project(p);
    if (verbose) {
      cout << "old corner = " << moved_corners[close_corner] << endl;
      cout << "new corner = " << new_corner << endl;
    }
    // Are we animating and is the selected corner the animated corner?
    if (animating && (close_corner == animated_point)) {
      // Yes, so just adjust the initial point.
      initial_point += (new_corner - moved_corners[close_corner]);
    } else {
      // No, so reposition the actual moved_corner.
      moved_corners[close_corner] = new_corner;
    }
    setModelMatrix();
    glutPostRedisplay();
    return;
  }

  if (zooming || scaling) {
    float3x3 t, r, s, m;
    float angle = 0;
    float zoom = 1;
    if (scaling) {
      angle = 0.3 * (mouse_space_x - rotate_x) * canvas_width/window_width;
    }
    if (zooming) {
      zoom = pow(1.003f, (mouse_space_y - scale_y) * canvas_height/window_height);
    }

    t = translate(anchor.x, anchor.y);
    r = rotate(angle);
    s = scale(zoom, zoom);

    r = mul(r, s);
    m = mul(t, r);
    t = translate(-anchor.x, -anchor.y);
    m = mul(m, t);
    view = mul(m, view);
    inverse_view = inverse(view);
    rotate_x = mouse_space_x;
    scale_y = mouse_space_y;
    glutPostRedisplay();
  }
  if (sliding) {
    float3x3 m;

    float x_offset = (mouse_space_x - slide_x) * canvas_width/window_width;
    float y_offset = (mouse_space_y - slide_y) * canvas_height/window_height;
    m = translate(x_offset, y_offset);
    view = mul(m, view);
    inverse_view = inverse(view);
    slide_y = mouse_space_y;
    slide_x = mouse_space_x;
    glutPostRedisplay();
  }
}

static void menu(int choice)
{
  keyboard(choice, 0, 0);
}

int
main(int argc, char **argv)
{
  GLenum status;
  GLboolean hasDSA;
  int samples = 0;

  glutInit(&argc, argv);
  for (int i=1; i<argc; i++) {
    if (argv[i][0] == '-') {
      int value = atoi(argv[i]+1);
      if (value >= 1) {
        samples = value;
        continue;
      }
    }
    fprintf(stderr, "usage: %s [-#]\n       where # is the number of samples/pixel\n",
      program_name);
    exit(1);
  }

  if (samples > 0) {
    if (samples == 1) 
      samples = 0;
    printf("requesting %d samples\n", samples);
    char buffer[200];
    sprintf(buffer, "rgb stencil~4 double samples~%d", samples);
    glutInitDisplayString(buffer);
  } else {
    /* Request a double-buffered window with at least 4 stencil bits and
       8 samples per pixel. */
    glutInitDisplayString("rgb stencil~4 double samples~8");
  }

  glutCreateWindow("Picking points in NV_path_rendering example");
  printf("vendor: %s\n", glGetString(GL_VENDOR));
  printf("version: %s\n", glGetString(GL_VERSION));
  printf("renderer: %s\n", glGetString(GL_RENDERER));
  printf("samples per pixel = %d\n", glutGet(GLUT_WINDOW_NUM_SAMPLES));
  printf("Executable: %d bit\n", (int)(8*sizeof(int*)));
  printf("\n");
  printf("Use left mouse button to scale/zoom (vertical, up/down)\n");
  printf("                      and rotate (right=clockwise, left=ccw)\n");
  printf("Click with left mouse and drag magenta points to warp scene\n");
  printf("\n");
  printf("Rotate and zooming is centered where you first left mouse click\n");
  printf("Hold down Ctrl at left mouse click to JUST SCALE\n");
  printf("Hold down Shift at left mouse click to JUST ROTATE\n");
  printf("\n");
  printf("Use middle mouse button to slide (translate)\n");
  printf("\n");
  printf("Space bar toggles warping animation\n");
  printf("\n");

  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutKeyboardFunc(keyboard);
  glutMouseFunc(mouse);
  glutMotionFunc(motion);

  glutCreateMenu(menu);
  glutAddMenuEntry("[f] Toggle filling", 'f');
  glutAddMenuEntry("[s] Toggle stroking", 's');
  glutAddMenuEntry("[r] Reset view", 'r');
  glutAddMenuEntry("[Esc] Quit", 27);
  glutAttachMenu(GLUT_RIGHT_BUTTON);

  status = glewInit();
  if (status != GLEW_OK) {
    fatalError("OpenGL Extension Wrangler (GLEW) failed to initialize");
  }
  // Use glutExtensionSupported since glewIsSupported is unreliabled for DSA.
  hasDSA = glutExtensionSupported("GL_EXT_direct_state_access");
  if (!hasDSA) {
    fatalError("OpenGL implementation doesn't support GL_EXT_direct_state_access (you should be using NVIDIA GPUs...)");
  }

  initialize_NVPR_GLEW_emulation(stdout, program_name, 0);
  if (!has_NV_path_rendering) {
    fatalError("required NV_path_rendering OpenGL extension is not present");
  }
  initGraphics();
  requestSynchornizedSwapBuffers(enable_vsync);
  initFPScontext(&gl_fps_context, FPS_USAGE_TEXTURE);
  colorFPS(0,1,0);
  disableFPS();

  glutMainLoop();
  return 0;
}

